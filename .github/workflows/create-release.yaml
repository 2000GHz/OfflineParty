name: Create Release

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Set up Git
        run: |
          git config --global user.name "2000GHz"
          git config --global user.email "59731892+2000GHz@users.noreply.github.com"

      - name: Check current directory and contents
        run: |
            pwd
            ls -la
  
      - name: Bump version and create tag
        id: bump_and_tag
        run: |
          cd .github/scripts
          chmod +x ./bump_version.sh
          current_version=$(cat version.txt)
          new_version=$(./bump_version.sh)
          git tag -a -m "Release v$new_version" "v$new_version"
          echo "::set-output name=new_version::v$new_version"

      - name: Push tag to repository
        run: git push origin ${{ steps.bump_and_tag.outputs.new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compress files for the release
        id: compress_files
        run: |
          cd /home/runner/work/OfflineParty/OfflineParty
          release_name="OfflineParty-${{ steps.bump_and_tag.outputs.new_version }}"
          7z a -t7z "${release_name}.7z" user_search.py requirements.txt README.md json_handling.py install_windows.ps1 install_macos.sh install_linux.sh get_favorites.py duplicate_finder.py download.py
          zip -r "${release_name}.zip" user_search.py requirements.txt README.md json_handling.py install_windows.ps1 install_macos.sh install_linux.sh get_favorites.py duplicate_finder.py download.py
          echo "::set-output name=release_name::$release_name"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3.1.3
        with:
          name: ${{ steps.bump_and_tag.outputs.new_version }}
          path: |
            ${{ steps.compress_files.outputs.release_name }}.7z
            ${{ steps.compress_files.outputs.release_name }}.zip

      - name: Create Release Notes
        id: create_release_notes
        run: |
          cd .github
          # Read release notes and save them to a variable
          release_notes=$(cat release_notes.md)
          echo "::set-output name=release_notes::$release_notes"
          cd /home/runner/work/OfflineParty/OfflineParty
          
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: ${{ steps.bump_and_tag.outputs.new_version }}  # Specify the tag name here
          files: |
              ${{ steps.compress_files.outputs.release_name }}.7z
              ${{ steps.compress_files.outputs.release_name }}.zip
          body: ${{ steps.create_release_notes.outputs.release_notes }}
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
