name: Create Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type (major, minor, patch)'
        required: true
        default: 'minor'

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.0

      - name: Set up Git
        run: |
          git config --global user.name "2000GHz"
          git config --global user.email "59731892+2000GHz@users.noreply.github.com"

      - name: Check affected files
        id: check_files
        run: |
          changed_files=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }})
          if echo "$changed_files" | grep -qvE '^\.github/'; then
            echo "::set-output name=github_only_changes::false"
          else
            echo "::set-output name=github_only_changes::true"
          fi
        
      - name: Get latest release version
        id: latest_version
        run: |
          latest_version=$(curl -sH "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name | sed 's/^v//')
          echo "::set-output name=version::$latest_version"

      - name: Bump version and create tag
        if: steps.check_files.outputs.github_only_changes == 'false'
        id: bump_and_tag
        run: |
          cd .github/scripts
          chmod +x ./bump_version.sh
          # Use the latest release version as the current version and pass the bump type
          new_version=$(./bump_version.sh ${{ steps.latest_version.outputs.version }} ${{ github.event.inputs.bump_type }})
          git tag -a -m "Release v$new_version" "v$new_version"
          echo "::set-output name=new_version::v$new_version"

      - name: Check and Push tag
        if: steps.check_files.outputs.github_only_changes == 'false'
        run: |
          if ! git rev-parse ${{ steps.bump_and_tag.outputs.new_version }} >/dev/null 2>&1; then
            git push origin ${{ steps.bump_and_tag.outputs.new_version }}
          else
            echo "Tag ${{ steps.bump_and_tag.outputs.new_version }} already exists. Not pushing the tag again."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Compress files for the release
        if: steps.check_files.outputs.github_only_changes == 'false'
        id: compress_files
        run: |
          cd /home/runner/work/OfflineParty/OfflineParty
          release_name="OfflineParty-${{ steps.bump_and_tag.outputs.new_version }}"
          7z a -t7z "${release_name}.7z" user_search.py requirements.txt README.md json_handling.py install_windows.ps1 install_macos.sh install_linux.sh get_favorites.py download.py discord_download.py
          zip -r "${release_name}.zip" user_search.py requirements.txt README.md json_handling.py install_windows.ps1 install_macos.sh install_linux.sh get_favorites.py download.py discord_download.py
          echo "::set-output name=release_name::$release_name"

      - name: Upload release artifacts
        if: steps.check_files.outputs.github_only_changes == 'false'
        uses: actions/upload-artifact@v3.1.3
        with:
          name: ${{ steps.bump_and_tag.outputs.new_version }}
          path: |
            ${{ steps.compress_files.outputs.release_name }}.7z
            ${{ steps.compress_files.outputs.release_name }}.zip

      - name: Create Release Notes
        if: steps.check_files.outputs.github_only_changes == 'false'
        id: create_release_notes
        run: |
          cd .github
          release_notes=$(cat release_notes.md | jq -Rs .)
          echo "::set-output name=release_notes::$release_notes"
          cd /home/runner/work/OfflineParty/OfflineParty

      - name: Create GitHub Release
        if: steps.check_files.outputs.github_only_changes == 'false'
        id: create_release
        uses: softprops/action-gh-release@v0.1.15
        with:
          tag_name: ${{ steps.bump_and_tag.outputs.new_version }}  # Specify the tag name here
          files: |
              ${{ steps.compress_files.outputs.release_name }}.7z
              ${{ steps.compress_files.outputs.release_name }}.zip
          body: ${{ fromJSON(steps.create_release_notes.outputs.release_notes) }}
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
